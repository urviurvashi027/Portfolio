import { AfterViewChecked, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class CKEditorComponent implements OnInit, OnDestroy, OnChanges, AfterViewChecked, ControlValueAccessor {
    private ngZone;
    private hostEl;
    private ckIns;
    private innerValue;
    private identifier;
    private disabled;
    private editorInitialized;
    /**
     * Is readonly mode, default:false
     */
    readonly: boolean;
    /**
     * The ck-editor config object.
     */
    config: any;
    /**
     * The special skin, default: moono-lisa
     */
    skin: string;
    /**
     * The special language, default: en
     */
    language: string;
    /**
     * Use fullpage mode, default:false
     */
    fullPage: boolean;
    /**
     * Use inline mode, default: false
     */
    inline: boolean;
    /**
     * The editor id
     */
    id: string;
    change: EventEmitter<{}>;
    ready: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    textareaRef: ElementRef;
    private static idx;
    private static getRandomIdentifier;
    onChange: (value: string) => void;
    onTouched: () => void;
    readonly instance: any;
    constructor(ngZone: NgZone, hostEl: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private initEditor;
    private destroyEditor;
    private updateValue;
    private documentContains;
    writeValue(value: any): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState?(isDisabled: boolean): void;
}
